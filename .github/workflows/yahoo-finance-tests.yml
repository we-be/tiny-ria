name: Yahoo Finance Tests
# Trigger new run

on:
  push:
    branches: [ main ]
    paths:
      - 'quotron/api-scraper/**'
      - 'quotron/api-scraper/scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'quotron/api-scraper/**'
      - 'quotron/api-scraper/scripts/**'
  workflow_dispatch: # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd quotron/api-scraper
        pip install -r scripts/requirements.txt

    - name: Download Latest CLI Release
      run: |
        # Get the latest CLI release
        echo "Downloading latest Quotron CLI..."
        mkdir -p /tmp/cli
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/we-be/tiny-ria/releases/latest)
        # Use jq to reliably get the download URL
        CLI_DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://github.com/we-be/tiny-ria/releases/download/[^/]*/.*linux" | head -n 1)
        
        # If no release found, use workflow_dispatch to trigger a release
        if [ -z "$CLI_DOWNLOAD_URL" ]; then
          echo "No CLI release found. Please create a release first using the cli-release.yml workflow."
          echo "You can trigger it manually from the Actions tab in GitHub."
          exit 1
        fi
        
        echo "Downloading CLI from: $CLI_DOWNLOAD_URL"
        curl -L -o /tmp/cli/quotron "$CLI_DOWNLOAD_URL"
        chmod +x /tmp/cli/quotron
        cp /tmp/cli/quotron quotron/quotron
        
        # Build API Scraper
        cd quotron/api-scraper
        go build -o api-scraper ./cmd/main/main.go

    - name: Test Yahoo Finance Integration
      run: |
        cd quotron/api-scraper
        # Run with Yahoo Finance flag
        ./api-scraper --yahoo --symbol AAPL
        # Test with a different symbol
        ./api-scraper --yahoo --symbol MSFT
        # Test a market index
        ./api-scraper --yahoo --index ^GSPC
        # Test JSON output
        ./api-scraper --yahoo --symbol GOOG --json > yahoo_test_output.json
        # Verify JSON output contains expected fields
        cat yahoo_test_output.json | grep -q "price" && \
        cat yahoo_test_output.json | grep -q "change" && \
        cat yahoo_test_output.json | grep -q "volume" && \
        cat yahoo_test_output.json | grep -q "timestamp" && \
        echo "JSON validation successful"

    - name: Test Yahoo Proxy Server Directly
      run: |
        cd quotron
        echo "Starting Yahoo Finance Proxy using Quotron CLI..."
        
        # Start the proxy server using the CLI
        ./quotron start yfinance-proxy
        
        # Test the health endpoint
        echo "Testing health endpoint..."
        curl -s http://localhost:8080/health | grep -q "ok" && echo "Health check successful"
        
        # Test the quote endpoint
        echo "Testing quote endpoint..."
        curl -s "http://localhost:8080/quote?symbol=AAPL" | grep -q "symbol" && echo "Quote endpoint successful"
        
        # Test the market endpoint
        echo "Testing market endpoint..."
        curl -s "http://localhost:8080/market?index=^GSPC" | grep -q "indexName" && echo "Market endpoint successful"
        
        # Stop the proxy server using the CLI
        echo "Stopping Yahoo Finance Proxy..."
        ./quotron stop yfinance-proxy