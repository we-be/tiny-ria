name: API Scraper Tests
# Trigger new run

on:
  push:
    branches: [main]
    paths:
      - "quotron/api-scraper/**"
      - "quotron/tests/integration/**"
  pull_request:
    branches: [main]
    paths:
      - "quotron/api-scraper/**"
      - "quotron/tests/integration/**"
  workflow_dispatch: # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install base testing dependencies
          pip install pytest pydantic playwright requests
          # Install dependencies for the api-scraper
          cd quotron/api-scraper
          pip install -r scripts/requirements.txt
          cd ../..

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium

      - name: Download Latest CLI Release and Build API Scraper
        run: |
          # Get the latest CLI release
          echo "Downloading latest Quotron CLI..."
          mkdir -p /tmp/cli
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/we-be/tiny-ria/releases/latest)
          # Use jq to reliably get the download URL
          CLI_DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://github.com/we-be/tiny-ria/releases/download/[^/]*/.*linux" | head -n 1)

          # If no release found, use workflow_dispatch to trigger a release
          if [ -z "$CLI_DOWNLOAD_URL" ]; then
            echo "No CLI release found. Please create a release first using the cli-release.yml workflow."
            echo "You can trigger it manually from the Actions tab in GitHub."
            exit 1
          fi

          echo "Downloading CLI from: $CLI_DOWNLOAD_URL"
          curl -L -o /tmp/cli/quotron "$CLI_DOWNLOAD_URL"
          chmod +x /tmp/cli/quotron
          cp /tmp/cli/quotron quotron/quotron

          # Build API Scraper
          cd quotron/api-scraper
          go build -o api-scraper ./cmd/main/main.go

      # Run with real API key - limited to main branch
      - name: Test API Scraper with real API (main branch)
        if: github.ref == 'refs/heads/main'
        env:
          ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        run: |
          cd quotron

          # Use Quotron CLI to start the proxy
          echo "Starting Yahoo Finance Proxy using Quotron CLI..."
          ./quotron start yfinance-proxy

          python tests/integration/test_integration.py --api

      # Run with demo API key for PRs (to avoid API key exposure)
      - name: Test API Scraper with demo API (PRs)
        if: github.ref != 'refs/heads/main'
        run: |
          cd quotron
          # Install yfinance for the proxy server
          cd api-scraper
          pip install -r scripts/requirements.txt

          cd ..

          # Use Quotron CLI to start the proxy
          echo "Starting Yahoo Finance Proxy using Quotron CLI..."
          ./quotron start yfinance-proxy

          # Try Alpha Vantage first
          export ALPHA_VANTAGE_API_KEY=demo
          python tests/integration/test_integration.py --api || {
            # Fall back to Yahoo Finance if Alpha Vantage fails
            echo "Alpha Vantage test failed, falling back to Yahoo Finance"
            export USE_YAHOO_FINANCE=true
            python tests/integration/test_integration.py --api
          }

          # Stop the proxy server using the CLI
          echo "Stopping Yahoo Finance Proxy..."
          ./quotron stop yfinance-proxy

      # Run other integration tests
      - name: Run other integration tests
        run: |
          cd quotron
          python tests/integration/test_integration.py --browser --auth --events
